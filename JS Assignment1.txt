Q.1 Explain Hoisting in JavaScript

Ans- Hoisting in JavaScript means that variable and function declarations are moved to the top of their containing scope during the compilation phase, allowing us to use them before we are actually written in our code. It's like giving them a special "head start" so we can refer to them earlier in our code than where we are physically written. However, only the declarations are moved, not the assignments or initializations.

console.log(message); // undefined
var message = "Hello, world!";
console.log(message); // "Hello, world!"

Q.2 Explain Temporal Dead Zone?
Ans- The Temporal Dead Zone (TDZ) is a behavior in JavaScript that occurs when using variables declared with let and const. In simple terms, the TDZ is the period between the start of a scope and the point at which a variable is declared, during which accessing the variable results in a ReferenceError.

When a block of code is executed, variables declared with let and const are hoisted to the top of their block but remain uninitialized until the actual declaration is reached. The TDZ is the time span between the start of the block and the point of declaration where accessing the variable will throw an error.

console.log(name); // ReferenceError: name is not defined
let name = "John";
console.log(name);

Q.3 Difference between var & let?
Ans- The main difference between var and let in JavaScript lies in their scope and behavior.

Scope: Variables declared with var have function scope or global scope, while variables declared with let have block scope.
Function scope (var):
function example() {
  var x = 10;
  if (true) {
    var x = 20;
    console.log(x); // 20
  }
  console.log(x); // 20
}

In this example, the variable x is accessible both inside and outside the if block because var does not have block scope. The second assignment to x inside the if block affects the value of x outside the block as well.

Block scope (let):
function example() {
  let x = 10;
  if (true) {
    let x = 20;
    console.log(x); // 20
  }
  console.log(x); // 10
}

With let, the variable x is scoped to the block within the if statement. The second assignment to x only affects its value within the block. Outside the block, the value of x remains unchanged.

Q.4 What are the major features introduced in ECMAScript 6?
Ans- ECMAScript 6, also known as ECMAScript 2015 or ES6, introduced several significant features and enhancements to JavaScript. Here are some of the major features introduced in ECMAScript 6:

let and const Declarations: Introduced block-scoped variables using let and constants using const, providing more predictable and controlled variable scoping.

Arrow Functions: Introduced concise syntax for writing anonymous functions using the => arrow notation, allowing for shorter function expressions and preserving the lexical value of this.

Classes: Introduced class syntax for creating objects and defining inheritance hierarchies, simplifying object-oriented programming in JavaScript.

Modules: Introduced a standardized module system for JavaScript, allowing developers to export and import functionality between files, improving code organization and reusability.

Template Literals: Introduced backtick () syntax to create template literals, enabling multiline strings, string interpolation using ${}`, and the ability to embed expressions within strings.

Enhanced Object Literals: Introduced shorthand syntax for defining object properties and methods, computed property names, and the ability to define getters and setters.

Destructuring Assignment: Introduced a concise way to extract values from arrays or objects and assign them to variables, simplifying code and making it more readable.

Spread and Rest Operators: Introduced the spread operator (...) to expand arrays or objects in places where multiple elements or properties are expected. The rest operator (...) is used to represent multiple elements or properties as an array.

Promises: Introduced a built-in way to handle asynchronous operations using Promises, making it easier to write and manage asynchronous code, particularly with the introduction of async/await in later versions.

Default Parameters: Introduced the ability to assign default values to function parameters, allowing functions to be called with fewer arguments or with undefined values.

Iterators and Generators: Introduced the concept of iterable objects and iterator protocols, enabling the creation of custom iterable data structures. Generators are functions that can be paused and resumed, providing a powerful mechanism for writing iterators.

These are just some of the major features introduced in ECMAScript 6. ECMAScript 6 brought significant improvements to JavaScript, making the language more expressive, powerful, and easier to work with. Subsequent versions of ECMAScript have built upon these features and introduced even more enhancements to JavaScript.

Q.6  What is template literals in ES6 and how do you use them?
Ans- Template literals, introduced in ECMAScript 6 (ES6), are a way to create strings in JavaScript using a more flexible and expressive syntax. They are enclosed within backtick characters ( ) instead of single or double quotes.

Template literals provide several features that make string manipulation easier and more readable:

String Interpolation: Template literals allow you to embed expressions inside a string using the ${} syntax. These expressions are evaluated and their values are inserted into the resulting string.

const name = "John";
const greeting = `Hello, ${name}!`;
console.log(greeting); // Output: Hello, John!

Q.7 Whatâ€™s difference between map & forEach?
Ans- map(): The map() method does not modify the original array. It creates and returns a new array with the modified elements.
const numbers = [1, 2, 3, 4, 5];

const squareMap = numbers.map((num) => num * num);
console.log(squareMap); // Output: [1, 4, 9, 16, 25]

forEach(): The forEach() method also does not modify the original array. It iterates over the array, executing a function for each element, but it does not create a new array.

const numbers = [1, 2, 3, 4, 5];

numbers.forEach((num) => console.log(num));
// Output:
// 1
// 2
// 3
// 4
// 5


Q.8 How can you destructure objects and arrays in ES6?
Ans- In ECMAScript 6 (ES6), object and array destructuring provide a concise and convenient way to extract values from objects and arrays into individual variables. Here's how you can destructure objects and arrays in ES6:

Destructuring Objects:
You can extract values from an object and assign them to variables with the same name as the object's properties.

const person = { name: 'John', age: 30, city: 'New York' };

// Destructuring object
const { name, age, city } = person;

console.log(name); // Output: 'John'
console.log(age); // Output: 30
console.log(city); // Output: 'New York'


In the example above, we destructure the person object, extracting the name, age, and city properties into individual variables.

const person = { name: 'John' };

const { name, age = 25, city = 'New York' } = person;

console.log(name); // Output: 'John'
console.log(age); // Output: 25 (default value)
console.log(city); // Output: 'New York' (default value)

In this case, if the age and city properties are not present in the person object, default values of 25 and 'New York' will be assigned respectively.

Destructuring Arrays:
You can extract values from an array and assign them to variables based on their positions.
const numbers = [1, 2, 3];

// Destructuring array
const [a, b, c] = numbers;

console.log(a); // Output: 1
console.log(b); // Output: 2
console.log(c); // Output: 3

In the example above, we destructure the numbers array, assigning its elements to variables a, b, and c based on their positions in the array.

Q.9 How can you define default parameter values in ES6 functions?
Ans- In ECMAScript 6 (ES6), you can define default parameter values for function parameters. Default parameters allow you to specify fallback values that will be used if the corresponding arguments are not provided when invoking the function. Here's how you can define default parameter values in ES6 functions:

function greet(name = 'Guest') {
  console.log(`Hello, ${name}!`);
}

greet(); // Output: Hello, Guest!
greet('John'); // Output: Hello, John!
In the example above, the greet() function has a parameter called name with a default value of 'Guest'. If no argument is passed when calling the function, the default value 'Guest' is used for the name parameter. When an argument is provided, such as 'John', it overrides the default value and the function uses the provided value.


Q.10 What is the purpose of the spread operator (...) in ES6?
Ans- In ECMAScript 6 (ES6), the spread operator (...) serves multiple purposes and provides useful functionalities. Here are some common use cases and purposes of the spread operator:

Array Spreading:
The spread operator can be used to "spread" or unpack elements of an array into individual elements. It allows you to easily create a new array by combining existing arrays or adding new elements.
const numbers = [1, 2, 3];
const moreNumbers = [4, 5, 6];

const combined = [...numbers, ...moreNumbers];
console.log(combined); // Output: [1, 2, 3, 4, 5, 6]

In this example, the spread operator is used to combine the elements of the numbers and moreNumbers arrays into a new array called combined.

Object Spreading:
Similarly, the spread operator can be used to spread the properties of an object into a new object. It allows you to create a new object by merging properties from multiple objects or adding new properties.

const person = { name: 'John', age: 30 };
const additionalInfo = { city: 'New York', country: 'USA' };

const merged = { ...person, ...additionalInfo };
console.log(merged);
// Output: { name: 'John', age: 30, city: 'New York', country: 'USA' }

In this example, the properties of the person object and the additionalInfo object are spread into a new object called merged.

Function Arguments:
The spread operator can be used to pass an array of values as arguments to a function. It allows you to expand an array into individual arguments when invoking a function.

function greet(name, age) {
  console.log(`Hello, ${name}! You are ${age} years old.`);
}

const person = ['John', 30];
greet(...person); // Output: Hello, John! You are 30 years old.

In this example, the spread operator is used to pass the elements of the person array as individual arguments to the greet() function.

Cloning Arrays and Objects:
The spread operator can be used to create a shallow copy of an array or an object.

const numbers = [1, 2, 3];
const clonedNumbers = [...numbers];

console.log(clonedNumbers); // Output: [1, 2, 3]

const person = { name: 'John', age: 30 };
const clonedPerson = { ...person };

console.log(clonedPerson);
// Output: { name: 'John', age: 30 }

In these examples, the spread operator is used to create copies of the numbers array and the person object.